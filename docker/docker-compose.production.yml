version: '3.8'

services:
  db:
    image: postgres:17
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - botblocker_network

  api:
    build: ../backend
    container_name: botblocker_api
    depends_on:
      db:
        condition: service_healthy
#    ports:
#      - "8000:8000"
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DEBUG: ${DEBUG}
      DJANGO_LOGLEVEL: ${DJANGO_LOGLEVEL}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      DATABASE_ENGINE: ${DATABASE_ENGINE}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    env_file:
      - .env
    networks:
      - botblocker_network

  website:
    build:
      context: ../website
    container_name: botblocker_website
    depends_on:
      - api
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/static:ro  # Read-only para o nginx
      - media_volume:/app/media:ro    # Read-only para o nginx
    environment:
      VITE_API_URL: ${VITE_API_URL}
    env_file:
      - .env
    networks:
      - botblocker_network

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  botblocker_network:
    driver: bridge